# Introduction to Elixir

```elixir
Mix.install([
  {:kino, "~> 0.6.2"}
])

import IEx.Helpers
```

## What is Elixir

* Elixir is a dynamically typed functional programming language
* Built on top of the Erlang VM (BEAM)
* Full inter-op with Erlang
* Ruby-like syntax
* Guaranteed immutability
* Actor-model for concurrency
* Everything is an expression
* First public release in 2012
* Most recent release 1.14 released yesterday
* Language is currently considered feature complete
* No plans for another major release
* Instead working on building out the eco-system (e.g. Machine learning)

## The basics

<!-- livebook:{"branch_parent_index":1} -->

## Types

Elixir has all of the types that you'd expect a language to have _and_ some that aren't common.

```elixir
i('Castor')
```

```elixir
i("Castor")
```

```elixir
i([1, 2, 3, 4, 5])
```

```elixir
i(%{company: "Castor", address: "George Westinghousestraat 2"})
```

```elixir
i(:castor)
```

```elixir
i({1, 2})
```

```elixir
i(self())
```

## Operators

* Boolean operators (`or`, `and`, `not`)
* Relaxed boolean operators (`||`, `&&`, `!`)
* Aritmetic operators (`+`, `-`, `/`, `*`)
* Join operators (`<>`, `++`, `--`)
* The `in` operator

Comparisons in Elixir are not strict, you can compare values of different types. If the types are the same or compatible the comparison uses natural orderding.

When not compatible the comparison follows the rule:

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart RL
   A[binary] ==> B[list] ==> C[map] ==> D[tuple] ==> E[pid] ==> F[port] ==> G[function] ==> H[reference] ==> I[atom] ==> J[number]
```

```elixir
1 == 1.0
```

```elixir
1 === 1.0
```

```elixir
5 > 2.1
```

```elixir
a = 10
b = 11
c = "Castor"
d = "Castor"

IO.inspect(a <= b)
IO.inspect(a >= b)
IO.inspect(c === d)
IO.inspect(true and false)

Kino.nothing()
```

```elixir
5 * 5
```

```elixir
[1, 2] ++ [3, 4]
```

```elixir
"Ca" <> "stor"
```

## Control Flow

Remember, in Elixir _everything_ is an expression. This includes the things that we are used to interpret as statements in other languages like PHP.

```elixir
if 1 === 1 do
  "Yes!"
else
  "No"
end
```

```elixir
value = false

unless value do
  "Castor!"
end
```

```elixir
cond do
  1 + 10 == 2 ->
    "Never here"

  true ->
    "Always here"
end
```

```elixir
value = 12

case value do
  12 ->
    "Yep, that is twelve"

  n ->
    n
end
```

## Pattern Matching

Pattern matching is one of Elixirs' features that makes it so nice to work with. You'll see why in a minute.

In Elixir the `=` is not an assignment-operator but a match-operator.

```elixir
x = 1
x
```

This is a valid expression because `x` is bound to `1`

```elixir
1 = x
```

A `MatchError` will be raised because the right-hand value is `1`

```elixir
2 = x
```

The pin `^` operator is used to access previously bound values

```elixir
^x = 1
```

You can use the match operator to destructure more complex data types as well.

```elixir
person = %{first_name: "Jane", last_name: "Doe"}

%{first_name: first_name} = person

first_name
```

```elixir
{1, b, 3} = {1, 2, 3}

b
```

```elixir
list = [10, 20, 30]

[head | tail] = list

IO.inspect(head)
IO.inspect(tail)

Kino.nothing()
```

## Functions

Functions are the bread and butter of Elixir and the building blocks of everything that you'll build.

```elixir
sum = fn a, b -> a + b end

sum.(1, 2)
```

```elixir
sum = &(&1 + &2)

sum.(1, 3)
```

A function can have multiple bodies and based on which pattern matches the body is evaluated.

```elixir
hello = fn
  "Castor" = name -> "Hi, " <> name <> "!"
  name -> "Hello, " <> name <> "!"
end

hello.("Castor")
```

```elixir
hello.("Elixir")
```

## Modules

Projects are organized in Modules. This is the only way to write named functions. Modules can't hold state like classes in PHP can.

```elixir
defmodule MyMath do
  def mul(a, b) do
    a * b
  end
end

MyMath.mul(10, 3)
```

Functions are identified based on their number of arguments (arity). Meaning that the function is executed that expects the number of arguments that you pass it.

```elixir
defmodule ArityExample do
  def passing_wrong_number(), do: "No arguments"
  def passing_wrong_number(one), do: one
  def passing_wrong_number(one, two), do: one + two
end

ArityExample.passing_wrong_number()
```

Pattern matching can also be used in function calls and allows us to stream line code without using `if/else` constructs.

```elixir
defmodule Factorial do
  def of(0), do: 1
  def of(n), do: n * of(n - 1)
end

Factorial.of(0)
```

```elixir
defmodule MyEnum do
  def map([], _func), do: []
  def map([head | tail], func), do: [func.(head) | map(tail, func)]
end

MyEnum.map([1, 2, 3], &(&1 * &1))
```

When pattern matching is not enough we can use guard clauses to decide which function to call based on the type and other characteristics of the arguments.

```elixir
defmodule Person do
  def allowed_to_drink(%{age: age}) when age >= 18 do
    "Yes"
  end

  def allowed_to_drink(_) do
    "No"
  end
end

Person.allowed_to_drink(%{age: 18})
```

Elixir is a tail call optimized language. This means that when you call the current function again as the final action in that function no new frame will be allocated on the stack.

```elixir
defmodule Factorial do
  def of(n), do: _of(n, 1)
  defp _of(0, acc), do: acc
  defp _of(n, acc), do: _of(n - 1, acc * n)
end

Factorial.of(10)
```

## Pipe operator

Pipes (`|>`) let you streamline your code into a more readable format.

For example when writing nested function calls. Passing the outcome of a function into the next.

```elixir
collection = Enum.map([1, 2, 3], &(&1 * 2))

Enum.max(collection)
```

```elixir
Enum.max(Enum.map([1, 2, 3], &(&1 * 2)))
```

A pipe in Elixir always inserts the result of an expression as the first parameter of the next function invocation.

```elixir
[1, 2, 3]
|> Enum.map(&(&1 * 2))
|> Enum.max()
```

Another pattern that is fairly common in the Elixir world is called Railway Oriented Programming. Below you'll see a simplified example of what this could look like.

```elixir
defmodule Cart do
  def line_items() do
    {:ok,
     [
       %{name: "Pen", price: 10},
       %{name: "Paper", price: 5}
     ]}
  end
end

defmodule Pricing do
  def calculate_total(line_items) do
    price =
      get_in(line_items, [Access.all(), :price])
      |> Enum.sum()

    {:ok, price}
  end
end

with {:ok, line_items} <- Cart.line_items(),
     {:ok, total_price} <- Pricing.calculate_total(line_items) do
  {:ok, total_price}
else
  {:error, _} ->
    "Something went wrong"
end
```

## Built-in Modules

You'll be working with lists and other enumerables a lot in Elixir so like for most data types there are specialized modules to work with them. The following is just a small sample.

```elixir
h(Enum)
```

But what if you have a big list or a file?

```elixir
1..10_000_000
|> Enum.map(fn x -> x * x end)
|> Enum.filter(fn x -> rem(x, 2) == 0 end)
|> Enum.take(5)
```

```elixir
h(Stream)
```

```elixir
my_stream =
  1..10_000_000
  |> Stream.map(fn x -> x * x end)
  |> Stream.filter(fn x -> rem(x, 2) == 0 end)

# my_stream |> Enum.take(5)
```

<!-- livebook:{"branch_parent_index":1} -->

## The actor model

One of the biggest benefits of Elixir is how it approaches concurrency. Because of the Erlang VM, concurrent programming is a lot more straightforward than you'd expect.

The concurrency model relies on Actors, a self-contained process that talks to other processes by sending messages. Each process has its own inbox that it can read messages from.

Elixir provides us with a number of abstractions that allow us to work with these processes, but we'll only cover the `Task` and `GenServer` modules.

## Spawning a process

There are no concrete rules that you have to follow in order to spawn your code in a separate process.

```elixir
defmodule Greeter do
  def greet(), do: IO.puts("Hello")
end
```

```elixir
Greeter.greet()
```

`spawn/3` lets us _spawn_ new processes.

```elixir
spawn(Greeter, :greet, [])
```

With a little bit of extra code we can communicate with our newly minted process. The `receive` block enables a process to read from its inbox and by using `send/2` we can send messages to other processes.

```elixir
defmodule Greeter do
  def greet() do
    receive do
      {sender, msg} ->
        send(sender, {:ok, "Hello #{msg}"})
        greet()
    end
  end
end
```

```elixir
pid = spawn(Greeter, :greet, [])
```

```elixir
send(pid, {self(), "World!"})
```

```elixir
receive do
  {:ok, message} -> IO.puts(message)
end

Process.alive?(pid)
```

## The Task abstraction

Tasks are one of the ways that you can do asynchronous processing in Elixir. Each Task will run in its own separate process.

Most commonly tasks are used to convert sequential code into concurrent code and they communicate little to not at all with other processes.

```elixir
expensive = fn ->
  :timer.sleep(2_000)
  "Hello!"
end

pid = Task.async(expensive)

# Do some other stuff here

result = Task.await(pid)

result
```

Because processes are so lightweight in Elixir we can spawn thousands and not even break a sweat.

```elixir
defmodule Parallel do
  def map(collection, fun) do
    collection
    |> Enum.map(&Task.async(fn -> fun.(&1) end))
    |> Enum.map(&Task.await/1)
  end
end

Parallel.map(1..1000, fn n -> n * 2 end)
```

## Erlang/OTP

OTP stands for "Open Telecom Platform" and reveals the origin of Erlang in the Telecom industry. In short it's a collection of tools and behaviours that Elixir has inherited from Erlang.

One of the key items in the toolbox are processses. We've already covered a small part of it but now we're gonna dive in some more advanced components.

<!-- livebook:{"branch_parent_index":13} -->

## GenServer

`GenServer` is a behaviour for implementing the server side of a client-server relationship. A GenServer is a process like any other.

A `GenServer` implementation consists of two parts; the client API and the server side callbacks.

There are three types of callbacks

* `handle_cast` for asynchronous operations
* `handle_call` for synchronous operations
* `handle_info` for all other types of messages a server could receive, e.g. from other processes

```elixir
defmodule Counter do
  @behaviour GenServer

  ###
  # Public API
  ###
  def start_link() do
    GenServer.start_link(__MODULE__, [], name: __MODULE__)
  end

  def increment() do
    GenServer.cast(__MODULE__, :increment)
  end

  def decrement() do
    GenServer.cast(__MODULE__, :decrement)
  end

  def current_value() do
    GenServer.call(__MODULE__, :current_value)
  end

  def stop() do
    GenServer.stop(__MODULE__)
  end

  ###
  # Callbacks
  ###
  @impl true
  def init(_) do
    {:ok, 0}
  end

  @impl true
  def handle_cast(:increment, state) do
    {:noreply, state + 1}
  end

  @impl true
  def handle_cast(:decrement, state) do
    {:noreply, state - 1}
  end

  @impl true
  def handle_call(:current_value, _from, state) do
    {:reply, state, state}
  end
end
```

```elixir
Counter.start_link()
```

```elixir
Counter.increment()
```

```elixir
Counter.current_value()
```

```elixir
Counter.stop()
```

## Supervisors

All of these background processes are fun and all, but what happens if they crash? The Elixir way tells you to not worry about crashed, but instead making sure the overall application keeps running.

In the Elixir world supervisors are responsible for starting, stopping, crash recovery, and monitoring processes.

One of the available types of supervisors is the `DynamicSupervisor`. This supervisor is useful in scenarios where you want to spawn a GenServer on demand e.g. games.

Let's first start a `Registry` for these processes because in this case we want them to be uniquely identifiable by name.

```elixir
Kino.start_child({Registry, keys: :unique, name: Registry.Game})
```

Next we'll build our Game `GenServer`, it won't be doing much here but imagine that you're building a multiplayer game and this process is responsible for keeping state about that specific instance of a game. Like the state of a gameboard and the players participating in that game.

```elixir
defmodule Game do
  use GenServer
  require Logger

  def start_link(name) do
    Logger.debug("Starting game with name #{name}")
    GenServer.start_link(__MODULE__, name, name: via_tuple(name))
  end

  def via_tuple(name), do: {:via, Registry, {Registry.Game, name}}

  ###
  # Callbacks
  ###
  def init(name) do
    Process.flag(:trap_exit, true)

    {:ok, %{name: name}}
  end

  def child_spec(name) do
    %{
      id: __MODULE__,
      start: {__MODULE__, :start_link, [name]},
      restart: :transient
    }
  end

  def terminate(_reason, state) do
    Logger.debug("Terminating")

    state
  end
end
```

We now have a `GenServer` that is responsible for keeping state about a game. But how we do we keep track of these games? That's where the Supervisor comes in, and in this case the `DynamicSupervisor`

```elixir
defmodule GamesSupervisor do
  use DynamicSupervisor

  alias Game

  def start_link(_opts) do
    DynamicSupervisor.start_link(__MODULE__, :ok, name: __MODULE__)
  end

  def start_game(name) do
    spec = {Game, name}
    DynamicSupervisor.start_child(__MODULE__, spec)
  end

  def init(:ok) do
    DynamicSupervisor.init(strategy: :one_for_one)
  end

  def stop_game(name) do
    DynamicSupervisor.terminate_child(__MODULE__, pid_from_name(name))
  end

  defp pid_from_name(name) do
    name
    |> Game.via_tuple()
    |> GenServer.whereis()
  end
end
```

Let's start the supervisor.

```elixir
Kino.start_child(GamesSupervisor)
```

We can see that it doesn't have any children yet.

```elixir
Supervisor.count_children(GamesSupervisor)
```

But this will change when we start some games.

```elixir
GamesSupervisor.start_game("my_game_1")
GamesSupervisor.start_game("my_game_2")
GamesSupervisor.start_game("my_game_3")
GamesSupervisor.start_game("my_game_4")
```

If we create a visual representation of our supervision tree we can see the newly created children.

```elixir
Kino.Process.sup_tree(GamesSupervisor)
```

Let's count our children again.

```elixir
Supervisor.count_children(GamesSupervisor)
```

We can also get more detailed information about them.

```elixir
Supervisor.which_children(GamesSupervisor)
```

If we want to inspect or debug state we can use the Erlang `:sys` module.

```elixir
via = Game.via_tuple("my_game_1")

:sys.get_state(via)
```

So what would happen if a game crashes?

```elixir
game_pid = GenServer.whereis(via)

GenServer.call(game_pid, :boom)
```

Our supervisor immediately restarts it.

```elixir
Kino.Process.sup_tree(GamesSupervisor)
```

```elixir
Game.via_tuple("my_game_1")
|> GenServer.whereis()
|> :sys.get_state()
```

```elixir
Kino.Process.sup_tree(GamesSupervisor)
```

Our games supervisor can also stop a game and because it stopped normally it won't be restarted.

```elixir
GamesSupervisor.stop_game("my_game_1")
```

```elixir
Kino.Process.sup_tree(GamesSupervisor)
```

```elixir
GamesSupervisor.stop_game("my_game_2")
GamesSupervisor.stop_game("my_game_3")
GamesSupervisor.stop_game("my_game_4")
```

```elixir
Supervisor.count_children(GamesSupervisor)
```

There are various different strategies available depending on your use-case. We've covered only a fraction of the power of supervisors. You're forced to think about reliability and state when you're designing your application.

This ia also just a small part of the tools available with OTP. There's also a built in term storage (ETS), a dbms (Mnesia), and plenty of different types of behaviours.

## The End

There's a lot of stuff that we haven't covered. Some of the more advanced stuff like protocols, macros, etc.

If you want to learn more about Elixir the following resources are very good introductions and both will go further and deeper than this session.

### Books

* Programming Elixir
* Elixir in Action

The books are available through learnerbly. There are plenty of books written about Elixir but both of these are great introductions.

### Online

* https://elixir-lang.org/getting-started/introduction.html
* https://livebook.dev/
* https://exercism.org/

I'm already thinking about a follow-up session that would cover a specific part of the Elixir eco-system.

Let me know what you would be most interested in? E.g. using Elixir to build web applications, machine learning applications, or concurrent data processing.

## Questions?
